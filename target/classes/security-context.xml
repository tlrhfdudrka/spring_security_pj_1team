<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
   xmlns:security="http://www.springframework.org/schema/security"
   xsi:schemaLocation="http://www.springframework.org/schema/security 
   http://www.springframework.org/schema/security/spring-security-4.2.xsd
      http://www.springframework.org/schema/beans 
      http://www.springframework.org/schema/beans/spring-beans.xsd">

   <!-- 7. 시큐리티 추가  -->
   <!-- Namespaces탭 : security 체크후 선택 > 오른쪽 4.2 버전 선택 <== pom.xml에 먼저 추가하고, 이클립스 버전은 2019 버전 사용해야 security가 뜬다. -->
   
   <security:http pattern="/resources/**"  security="none" />
   <security:http pattern="/common/**"  security="none" />
   <security:http auto-config="true" use-expressions="true" create-session="never">
      
      <!-- 관리자 권한 영역 : 상품관리 -->
      <security:intercept-url pattern="/**.pd" access="hasRole('ROLE_ADMIN')"/>
      
       <!-- 로그인한 사용자 영역(customer + 관리자) : id가 pk이므로 hasRole을 주면 권한 1개밖에 부여못하므로, hasAnyRole을 이용해 여러개 권한부여가 가능 -->
      <security:intercept-url pattern="/**.bc" access="hasRole('ROLE_ADMIN')" />
      
      <!--누구든지 사용가능 -->
       <security:intercept-url pattern="/**.qa" access="hasAnyRole('ROLE_ADMIN', 'ROLE_USER')" />
      
      
      <!-- 권한에 상관없이 접속 가능 영역(guest도 접속 가능) -->
      <security:intercept-url pattern="/**.do" access="permitAll"/>
      
     
      <!-- 로그인폼 -->
      <security:form-login login-page="/login.do"
                  login-processing-url="/loginAction.do"
                  authentication-success-handler-ref="userLoginSuccessHandler"
                  authentication-failure-handler-ref="userLoginFailureHandler"
                  username-parameter="user_id"  password-parameter="user_pwd" 
      />
      
      <!-- 같은 브라우저에서 여러창 동시접속수 / 세션만료시 이동할 주소 / 초대 세션 초과시 에러 옵션 -->
      <security:session-management>
         <security:concurrency-control max-sessions="2" 
                  expired-url="/login.do" 
                  error-if-maximum-exceeded="true" 
         />
      </security:session-management>
   </security:http>
   
   <!-- 로그인 성공시 작동 -->
   <bean id="userLoginSuccessHandler" class="spring.mvc.basic_1team.security.UserLoginSuccessHandler">
      <constructor-arg name="sqlSession" ref="sqlSession" />  <!-- dataSource-config.xml의 sqlSession 참조 -->
   </bean>
   
   <!-- 로그인 실패시 작동 -->
   <bean id="userLoginFailureHandler" class="spring.mvc.basic_1team.security.UserLoginFailureHandler">
      <constructor-arg name="sqlSession" ref="sqlSession" />  <!-- dataSource-config.xml의 sqlSession 참조 -->
      <constructor-arg name="passwordEncoder" ref="bCryptPasswordEncoder" /> 
   </bean>
   
   <!-- 접근 권한이 없는 경우 작동  -->
   <bean id="userDeniedHandler" class="spring.mvc.basic_1team.security.UserDeniedHandler" />
   
   <!-- 로그인 인증처리 클래스 -->
   <bean id="userAuthenticationService" class="spring.mvc.basic_1team.security.UserAuthenticationService">
      <constructor-arg name="sqlSession" ref="sqlSession" /> 
   </bean>
   
   <!-- 비밀번호 암호화 클래스  -->
   <bean id="bCryptPasswordEncoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder" />
   
</beans>